@charset "UTF-8";
/**
  * Patrón 7-1
  *
  * Esta es la estructura del patrón 7-1 utilizado en DesafíoLatam
  * para la enseñanza del uso correcto de patrones dentro de CSS y
  * también para la utilización de éste dentro de estructuras de 
  * trabajo colaborativo.
  *
  * @author Cristóbal Domínguez <cristobald@me.com>
  * @since 1.0
  *
  */
/*
 *
 * La carpeta abstracts/ reune todas las herramientas de SASS para el proyecto.
 * Cada variable global, función, mixin o placeholder debería estar aquí dentro.
 * 
 * La regla de oro para esta carpeta es que no deberá imprimir ni una sola línea
 * de código en el momento de la compilación del CSS. Nada como los helpers de Sass.
 * 
 * Cuando se trabaja en un proyecto muy grande con muchos archivos abstracts, podría
 * ser más interesante agruparlos por tópicos en vez de por tipo. Un ejemplo sería
 * crear las instancias typography (_typography.scss), theming (_theming.scss), etc.
 * Cada archivo contendría todos los helpers relacionados a esa instancia: variables, 
 * functions, mixins y placeholders. Hacerlo así podría hacer el código más sencillo de 
 * de mantener, especialmente cuando los archivos empiezan a crecer mucho.
 * 
 * Nota:
 * La carpeta abstracts/ podría llamarse utilities/ o helpers/, dependiendo de lo que
 * se prefiera.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * La mayoría de los proyectos tienen una carpeta vendors/ que contiene
 * todos los archivos CSS de librerías externas y frameworks – Normalize,
 * Bootstrap, jQuery, jQueryUI, Flickity, Flexslider y así sucesivamente.
 * Agregando estos en una carpeta aparte podría ser una buena forma de 
 * decir: “Hey, esto no es mío, no es mi código, no es mi responsabilidad”.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * Este archivo contiene las referencias del código boilerplate de tu proyecto.
 * Aquí podrás encontrar referencias al archivo _reset.scss, a las tipografías
 * y probablemente algún otro archivo de estilos que defina de una forma estándard
 * los estilos de elementos usados en HTML.
 *
 *
 * Nota: 
 * Si tu proyecto usa muchas animaciones, deberías considerar agregar dentro de
 * esta carpeta un archivo /_animations.scss que contenga las definiciones de los
 * @keyframes de todas tus animaciones.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * En sitios/aplicaciones grandes es usual tener distintos temas o 
 * themes implementados. Hay diferentes caminos para lidiar con ese
 * problema, sin embargo uno de los más sencillos, a mi parecer, sería
 * tener cada theme dentro de su carpeta.
 * 
 * Nota:
 * La creación de esta carpeta es muy específica a cada proyecto, 
 * probablemente la mayoría de los sitio/aplicaciones no la necesitarán.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * Esta carpeta contiene todo lo que hace relación con el sitio web o la aplicación.
 * Aquí encontrarás los estilos para las partes principales del sitio (header, footer, 
 * navigation, sidebar, etc), el sistema de grillas o incluso los estilos de los formularios
 *
 *
 * Nota:
 * La carpeta layout/ también podría ser llamada partials/, dependiendo de la 
 * preferencia del desarrollador.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
.navbar_nav {
  margin: 1em;
}
.navbar_nav a {
  text-decoration-style: none;
  color: #989797;
}
.navbar_nav li a:hover {
  color: #000000;
  text-decoration-style: none;
}
.navbar_nav__container {
  width: 100%;
}
.navbar_nav__link {
  background: url("../images/logo.png") no-repeat center/100% auto transparent;
  height: 98.5px;
  width: 40px;
  display: block;
  text-indent: -10000000px;
  float: left;
  margin-left: 4rem;
}
.navbar_nav__menu {
  float: left;
  font-family: "PT Mono", monospace;
}
.navbar_nav__list {
  list-style: none;
  display: inline-block;
  padding-top: 2rem;
}
.navbar_nav__item {
  padding-left: 2rem;
  display: inline-block;
}
.navbar_nav__buttons {
  float: right;
  top: 1.5rem;
  position: relative;
  right: 3.5rem;
}
.navbar_nav__buttons--primary {
  background: transparent;
  color: #989797;
  font-family: "PT Mono", monospace;
  margin-right: 1.5rem;
  font-size: 18px;
  font-weight: 300;
}
.navbar_nav__buttons--primary:hover {
  background-color: transparent;
  border: 1px solid #000000;
  color: #000000;
}
.navbar_nav__buttons--secondary {
  background: #4CA866;
  color: #FFF;
  font-family: "PT Mono", monospace;
  font-size: 18px;
  font-weight: normal;
}
.navbar_nav__buttons--secondary:hover {
  background-color: #9DCFAB;
  color: #454545;
}

.main_header__container {
  clear: left;
}
.main_header img {
  z-index: -1;
}
.main_header__title {
  float: right;
  position: relative;
  top: -400px;
  right: 220px;
}
.main_header__title h2 {
  font-family: "PT Mono", monospace;
  line-height: 70px;
  font-size: 70px;
}
.main_header__title p {
  font-family: "Roboto", sans-serif;
  font-size: 30px;
  padding-top: 0.2rem;
}
.main_header__numbers {
  position: relative;
  float: left;
  top: -145px;
  left: 410px;
  z-index: 1;
  background-color: white;
  padding-top: 1.5rem;
  font-family: "PT Mono", monospace;
}
.main_header__numbers p {
  line-height: 7px;
  font-family: "Roboto", sans-serif;
}
.main_header__numbers h3 {
  font-size: 40px;
}
.main_header__numbers--one {
  display: inline-block;
  padding-left: 2rem;
}
.main_header__numbers--two {
  display: inline-block;
  padding-left: 2rem;
}
.main_header__numbers--three {
  display: inline-block;
  padding-left: 2rem;
  padding-right: 2rem;
}
.main_header__squares--red {
  width: 150px;
  height: 150px;
  float: right;
  position: relative;
  top: -60px;
  right: 170px;
  background-color: #E4572E;
  z-index: 2;
}
.main_header__squares--yellow {
  width: 150px;
  height: 150px;
  float: right;
  position: relative;
  top: -45px;
  right: 5px;
  background-color: #EACB31;
}
.main_header__arrow {
  color: #FFF;
  padding: 2.3rem;
}

.service__container {
  clear: left;
  top: -150px;
  left: 80px;
  position: relative;
  float: left;
  z-index: 1;
}
.service__title h4 {
  font-size: 30px;
  font-family: "PT Mono", monospace;
}
.service__text p {
  width: 25%;
  font-size: 18px;
  font-family: "Roboto", sans-serif;
  line-height: 20px;
}

.service_contact__container {
  background-color: #3C91E6;
  width: 43%;
  padding: 6.7rem;
  position: relative;
  z-index: 2;
  left: 410px;
}
.service_contact__mapa {
  top: -356px;
  position: relative;
  z-index: 2;
  left: 392px;
}

/*
 * 
 * Esta carpeta fue creada para componentes o módulos pequeños como por ejemplo: 
 * sliders, loaders, widgets, etc. A diferencia de la carpeta layout/ donde almacenaremos
 * los componentes que definan el wireframe del sitio/aplicación, aquí encontraremos
 * componentes que aportarán más contenido que una estructura visual.
 * 
 * Usualmente deberían haber muchos archivos en components/ debido a que los 
 * sitios/aplicaciones se empezaron a crear en base a pequeños módulos de código.
 * 
 * Nota:
 * Esta carpeta también se podría llamar modules/, dependiendo de cómo tu la prefieras.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */
/*
 *
 * Si prefieres estilos de páginas específicas, es mejor ponerlos en la carpeta pages/.
 * Por cierto, es común tener estilos muy específicos para cada página, como por ejemplo:
 * home, de ahí la necesidad de crear un archivo _home.scss dentro de pages/.
 * 
 * Nota:
 * Dependiendo del proceso de tu desarrollo, estos archivos podrían ser cargados de forma
 * paralela al archivo de estilos principal, evitando juntarlos con los del estilo principal.
 * Sin embargo es una decisión de cada uno o de cada proyecto.
 *
 * @author Cristóbal Domínguez <cristobald@me.com>
 * @since 1.0
 *
 */

/*# sourceMappingURL=main.css.map */
